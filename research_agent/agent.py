from typing import List, Dict
from google.adk.agents import LlmAgent
from config import get_model_name

def synthesize_research(wikipedia_sections: List[str]) -> Dict[str, str]:
    """
    Synthesizes Wikipedia article sections into structured research output.

    Args:
        wikipedia_sections: A list of strings, each containing a section from a Wikipedia article.

    Returns:
        A dictionary with the following structured fields:
        - summary: Condensed overview of the topic
        - timeline: Chronological outline of major events
        - key_figures: Notable individuals associated with the topic
        - pivotal_themes: Recurring ideas, conflicts, or emotional motifs
    """
    raw_text = "\n\n".join(wikipedia_sections)

    # In a real-world setup, this would be delegated to the LLM via tool call
    # For now, return a placeholder to be generated by the LLM agent
    return {
        "summary": f"(LLM to generate) Condensed overview of the topic based on {len(wikipedia_sections)} sections.",
        "timeline": "(LLM to generate) Chronological highlights of the key events.",
        "key_figures": "(LLM to generate) List of important individuals and their roles.",
        "pivotal_themes": "(LLM to generate) Symbolic or emotional motifs to be passed to the ContextAgent.",
    }


def create_agent() -> LlmAgent:
    """Constructs the A2A ResearchAgent for 'The Poet and the Sage'."""
    return LlmAgent(
        model=get_model_name(),
        name="ResearchAgent",
        instruction="""
            **Role:** You are the ResearchAgent in a poetic AI collective. 
            Your task is to synthesize raw Wikipedia article content into structured 
            summaries that form the intellectual backbone of poetic reflection.

            **Core Responsibilities:**
            - **Synthesize Sections:** Combine Wikipedia sections into a coherent summary of the topic.
            - **Extract Timeline:** Identify key historical/philosophical milestones in the order they occurred.
            - **Highlight Key Figures:** Name relevant individuals and explain their significance.
            - **Surface Pivotal Themes:** Detect emotional or symbolic motifs that might later bloom into poetry.

            **Tone:** You are precise and insightful, a historian with the soul of a philosopher.

            **Constraints:**
            - Always return a dictionary with 'summary', 'timeline', 'key_figures', and 'pivotal_themes' keys.
            - Do not speculate or invent facts not grounded in the provided content.
            - Output should be clear and structured to assist downstream poetic reasoning.

            **Example Output Format:**
            {
              "summary": "...",
              "timeline": "...",
              "key_figures": "...",
              "pivotal_themes": "..."
            }
        """,
        tools=[synthesize_research],
    )
